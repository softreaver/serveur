package com.auditFal.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.auditFal.beans.Entity;

public class PostgresEntityDAO extends EntityDAO {
	private static final String SQL_CREATE = "INSERT INTO activities (name, lowerName, active) VALUES (?, ?, ?)";
	private static final String SQL_FIND_BY_LOWER_NAME = "SELECT * FROM activities WHERE lowername = ?";
	private static final String SQL_UPDATE = "UPDATE activities SET name = ?, lowerName = ?, active = ? WHERE id = ?";
	private static final String SQL_FIND_BY_ID = "SELECT * FROM activities WHERE id = ?";

	@Override
	public Long create(Connection connection, Entity entity) throws DAOException {
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedKey = null;
		
		try {
			String name = entity.getName();
			String lowerName = entity.getLowerName();
			Boolean active = entity.getActive();
			
			preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_CREATE, true, name, lowerName, active);
			int sqlStatus = preparedStatement.executeUpdate();
			
			if ( sqlStatus == 0 )
	            throw new DAOException( "Échec de la création de l'item, aucune ligne ajoutée dans la table." );
			
	        /* Retrieve the autoGenerated key after insertion */
			autoGeneratedKey = preparedStatement.getGeneratedKeys();
	        if ( autoGeneratedKey.next() ) {
	        	return autoGeneratedKey.getLong( 1 );
	        } else {
	            throw new DAOException( "Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné." );
	        }
		} catch (SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUtils.closeResultSet(autoGeneratedKey);
			DAOUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public Entity find(Connection connection, Entity entity) throws DAOException {
		return this.findByLowerName(connection, entity.getLowerName());
	}
	
	@Override
	public Entity findById(Connection connection, Long id) throws DAOException {
		PreparedStatement preparedStatement = null;
		ResultSet result = null;
		
		try {
			preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_ID, false, id);
			result = preparedStatement.executeQuery();
			if(result.next()) {
				return Entity.parseResultSet(result);
			} else {
				return null;
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUtils.closeResultSet(result);
			DAOUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public Entity findByLowerName(Connection connection, String lowerName) throws DAOException {
		PreparedStatement preparedStatement = null;
		ResultSet result = null;
		
		try {
			preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_LOWER_NAME, false, lowerName);
			result = preparedStatement.executeQuery();
			if(result.next()) {
				return Entity.parseResultSet(result);
			} else {
				return null;
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUtils.closeResultSet(result);
			DAOUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public void update(Connection connection, Entity entity) throws DAOException {
		PreparedStatement preparedStatement = null;
		try {
			Long id = entity.getId();
			String name = entity.getName();
			String lowerName = entity.getLowerName();
			Boolean active = entity.getActive();
			preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_UPDATE, false, name, lowerName, active, id);
			int sqlStatus = preparedStatement.executeUpdate();
			
			if ( sqlStatus == 0 )
	            throw new DAOException( "Échec de la mise à jour de l'item, aucune ligne modifiée dans la table." );
			
		} catch (Exception e) {
			throw new DAOException(e);
		} finally {
			DAOUtils.closeStatement(preparedStatement);
		}
	}
}
