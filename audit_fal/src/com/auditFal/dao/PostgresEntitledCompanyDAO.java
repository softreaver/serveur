package com.auditFal.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.auditFal.beans.EntitledCompany;

public class PostgresEntitledCompanyDAO extends EntitledCompanyDAO {
    private static final String SQL_CREATE = "INSERT INTO entitledcompanies (name, lowerName, active) VALUES (?, ?, ?)";
    private static final String SQL_FIND_BY_LOWER_NAME = "SELECT * FROM entitledcompanies WHERE lowername = ?";
    private static final String SQL_UPDATE = "UPDATE entitledcompanies SET name = ?, lowerName = ?, active = ? WHERE id = ?";
    private static final String SQL_FIND_BY_ID = "SELECT * FROM entitledcompanies WHERE id = ?";
    private static final String SQL_GET_ALL = "SELECT * FROM entitledcompanies";

    @Override
    public Long create(Connection connection, EntitledCompany entitledCompany) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet autoGeneratedKey = null;

	try {
	    String name = entitledCompany.getName();
	    String lowerName = entitledCompany.getLowerName();
	    Boolean active = entitledCompany.getActive();

	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_CREATE, true, name, lowerName, active);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la création de l'item, aucune ligne ajoutée dans la table.");

	    /* Retrieve the autoGenerated key after insertion */
	    autoGeneratedKey = preparedStatement.getGeneratedKeys();
	    if (autoGeneratedKey.next())
		return autoGeneratedKey.getLong(1);
	    else
		throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(autoGeneratedKey);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public EntitledCompany find(Connection connection, EntitledCompany entitledCompany) throws DAOException {
	return findByLowerName(connection, entitledCompany.getLowerName());
    }

    @Override
    public EntitledCompany findById(Connection connection, Long id) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_ID, false, id);
	    result = preparedStatement.executeQuery();
	    if (result.next())
		return EntitledCompany.parseResultSet(result);
	    else
		return null;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public EntitledCompany findByLowerName(Connection connection, String lowerName) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_LOWER_NAME, false, lowerName);
	    result = preparedStatement.executeQuery();
	    if (result.next())
		return EntitledCompany.parseResultSet(result);
	    else
		return null;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public void update(Connection connection, EntitledCompany entitledCompany) throws DAOException {
	PreparedStatement preparedStatement = null;
	try {
	    Long id = entitledCompany.getId();
	    String name = entitledCompany.getName();
	    String lowerName = entitledCompany.getLowerName();
	    Boolean active = entitledCompany.getActive();
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_UPDATE, false, name, lowerName, active,
		    id);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la mise à jour de l'item, aucune ligne modifiée dans la table.");

	} catch (Exception e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public ArrayList<EntitledCompany> getAll(Connection connection) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<EntitledCompany> entitledCompanies = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_GET_ALL, false);
	    result = preparedStatement.executeQuery();

	    while (result.next())
		entitledCompanies.add(EntitledCompany.parseResultSet(result));

	    return entitledCompanies;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }
}
