package com.auditFal.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.auditFal.beans.Post;

public class PostgresPostDAO extends PostDAO {

    // @formatter:off
	private static final String SQL_CREATE 			= "INSERT INTO posts (name, lowerName, active) VALUES (?, ?, ?)";
	private static final String SQL_FIND_BY_LOWER_NAME 	= "SELECT * FROM posts WHERE lowername = ?";
	private static final String SQL_UPDATE 			= "UPDATE posts SET name = ?, lowerName = ?, active = ? WHERE id = ?";
	private static final String SQL_FIND_BY_ID 		= "SELECT * FROM posts WHERE id = ?";
	private static final String SQL_GET_ALL			= "SELECT * FROM posts";
	private static final String SQL_POSTS_BUILDINGS_DELETE 	= "DELETE FROM posts_buildings WHERE id_posts = ? AND id_buildings = ?";
	private static final String SQL_POSTS_BUILDINGS_CREATE 	= "INSERT INTO posts_buildings (id_posts, id_buildings) VALUES (?, ?)";
	private static final String SQL_POSTS_BUILDINGS_FIND 	= "SELECT * FROM posts_buildings WHERE id_posts = ?";
	// @formatter:on

    @Override
    public Long create(Connection connection, Post post) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet autoGeneratedKey = null;

	try {
	    String name = post.getName();
	    String lowerName = post.getLowerName();
	    Boolean active = post.getActive();

	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_CREATE, true, name, lowerName, active);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la création de l'item, aucune ligne ajoutée dans la table.");

	    /* Retrieve the autoGenerated key after insertion */
	    autoGeneratedKey = preparedStatement.getGeneratedKeys();
	    if (autoGeneratedKey.next()) {
		Long itemId = autoGeneratedKey.getLong(1);

		syncDpendencies(connection, itemId, post.getDependencies());

		return itemId;
	    } else
		throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(autoGeneratedKey);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public Post find(Connection connection, Post post) throws DAOException {
	return findByLowerName(connection, post.getLowerName());
    }

    @Override
    public Post findById(Connection connection, Long id) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_ID, false, id);
	    result = preparedStatement.executeQuery();
	    if (result.next())
		return Post.parseResultSet(result);
	    else
		return null;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public Post findByLowerName(Connection connection, String lowerName) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_LOWER_NAME, false, lowerName);
	    result = preparedStatement.executeQuery();
	    if (result.next())
		return Post.parseResultSet(result);
	    else
		return null;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public void update(Connection connection, Post post) throws DAOException {
	PreparedStatement preparedStatement = null;
	try {
	    Long id = post.getId();
	    String name = post.getName();
	    String lowerName = post.getLowerName();
	    Boolean active = post.getActive();
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_UPDATE, false, name, lowerName, active,
		    id);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la mise à jour de l'item, aucune ligne modifiée dans la table.");

	    syncDpendencies(connection, id, post.getDependencies());

	} catch (Exception e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    private void syncDpendencies(Connection connection, Long itemId, ArrayList<Long> dependencies) throws SQLException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    // get all junctions
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_POSTS_BUILDINGS_FIND, false, itemId);
	    result = preparedStatement.executeQuery();
	    ArrayList<Long> junctionsToRemove = new ArrayList<>();
	    ArrayList<Long> junctionsToKeep = new ArrayList<>();

	    while (result.next()) {
		Long id = result.getLong("id_buildings");
		if (dependencies.contains(id))
		    junctionsToKeep.add(id);
		else
		    junctionsToRemove.add(id);
	    }
	    // Remove junctions
	    for (Long buildingId : junctionsToRemove) {
		DAOUtils.closeStatement(preparedStatement);
		preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_POSTS_BUILDINGS_DELETE, false,
			itemId, buildingId);
		preparedStatement.executeUpdate();
	    }

	    // Add junctions
	    for (long id : dependencies)
		if (!junctionsToKeep.contains(id)) {
		    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_POSTS_BUILDINGS_CREATE, false,
			    itemId, id);
		    preparedStatement.executeUpdate();
		}

	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}

    }

    @Override
    public ArrayList<Post> getAll(Connection connection) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Post> posts = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_GET_ALL, false);
	    result = preparedStatement.executeQuery();

	    while (result.next())
		posts.add(Post.parseResultSet(result));

	    // Get all dependencies for each buildings
	    for (Post post : posts)
		post.setDependencies(getDependencies(connection, post.getId()));

	    return posts;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    private ArrayList<Long> getDependencies(Connection connection, Long itemId) throws SQLException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Long> dependencies = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_POSTS_BUILDINGS_FIND, false, itemId);
	    result = preparedStatement.executeQuery();

	    while (result.next())
		dependencies.add(result.getLong("id_buildings"));

	    return dependencies;
	} catch (SQLException e) {
	    throw new DAOException(e.getMessage());
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }
}
