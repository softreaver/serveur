package com.auditFal.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.auditFal.beans.Visit;

public class PostgresVisitDAO extends VisitDAO {

    // @formatter:off
    private static final String SQL_CREATE 		= "INSERT INTO visits VALUES (default, ?, ?, ?, ?, null, ?, ?, ?, ?, ?, ?, ?)"; /* id | title | worktype | workingcompany | dateofvisit | id_users | id_entitledcompanies | id_buildings | id_activities | id_workstations | id_posts | ispidigital | pinumber */
    private static final String SQL_UPDATE 		= "UPDATE visits SET title = ?, worktype = ?, workingcompany = ?, dateofvisit = ?, id_entitledcompanies = ?, id_buildings = ?, id_activities = ?, id_workstations = ?, id_posts = ? WHERE id = ?";
    private static final String SQL_GET_ALL 		= "SELECT * FROM visits";
    private static final String SQL_FIND_BY_ID		= "SELECT * FROM visits WHERE id = ?";
    private static final String SQL_FROM_DATE 		= "SELECT * FROM visits WHERE dateofvisit >= ?";
    private static final String SQL_UP_TO_DATE 		= "SELECT * FROM visits WHERE dateofvisit <= ?";
    private static final String SQL_BETWEEN_DATES 	= "SELECT * FROM visits WHERE dateofvisit >= ? AND dateofvisit <= ?";
    // @formatter:on

    @Override
    public Long create(Connection connection, Visit visit) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet autoGeneratedKey = null;

	try {
	    String title = visit.getTitle();
	    String workingCompany = visit.getWorkingCompany();
	    Long workType = visit.getWorkType();
	    Long dateOfVisit = visit.getDateOfVisit();
	    Long idEntitledCompanies = visit.getIdEntitledCompany();
	    Long idBuildings = visit.getIdBuilding();
	    Long idActivities = visit.getIdActivity();
	    Long idWorkStations = visit.getIdWorkStation();
	    Long idPosts = visit.getIdPost();
	    Boolean isPiDigital = visit.getIsPiDigital();
	    Long piNumber = visit.getPiNumber();

	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_CREATE, true, title, workType,
		    workingCompany, dateOfVisit, idEntitledCompanies, idBuildings, idActivities, idWorkStations,
		    idPosts, isPiDigital, piNumber);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la création de la visite, aucune ligne ajoutée dans la table.");

	    /* Retrieve the autoGenerated key after insertion */
	    autoGeneratedKey = preparedStatement.getGeneratedKeys();
	    if (autoGeneratedKey.next())
		return autoGeneratedKey.getLong(1);
	    else
		throw new DAOException("Échec de la création de la visite en base, aucun ID auto-généré retourné.");
	} catch (SQLException e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(autoGeneratedKey);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public ArrayList<Visit> getAll(Connection connection) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Visit> visits = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_GET_ALL, false);
	    result = preparedStatement.executeQuery();

	    while (result.next())
		visits.add(Visit.parseResultSet(result));

	    return visits;
	} catch (SQLException e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public void update(Connection connection, Visit visit) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet autoGeneratedKey = null;

	try {
	    String title = visit.getTitle();
	    String workingCompany = visit.getWorkingCompany();
	    Long dateOfVisit = visit.getDateOfVisit();
	    Long idEntitledCompanies = visit.getIdEntitledCompany();
	    Long idBuildings = visit.getIdBuilding();
	    Long idActivities = visit.getIdActivity();
	    Long idWorkStations = visit.getIdWorkStation();
	    Long idPosts = visit.getIdPost();

	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_UPDATE, false, title, workingCompany,
		    dateOfVisit, idEntitledCompanies, idBuildings, idActivities, idWorkStations, idPosts);
	    int sqlStatus = preparedStatement.executeUpdate();

	    if (sqlStatus == 0)
		throw new DAOException("Échec de la création de la visite, aucune ligne ajoutée dans la table.");

	} catch (SQLException e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(autoGeneratedKey);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public ArrayList<Visit> findByDate(Connection connection, Long fromDate, Long toDate) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Visit> visits = new ArrayList<>();

	try {
	    if (fromDate == null && toDate == null)
		return getAll(connection);
	    else if (fromDate == null)
		visits = findAfterDate(connection, fromDate);
	    else if (toDate == null)
		visits = findBeforeDate(connection, toDate);
	    else {
		preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_BETWEEN_DATES, false, fromDate,
			toDate);
		result = preparedStatement.executeQuery();
		while (result.next())
		    visits.add(Visit.parseResultSet(result));

	    }

	    return visits;
	} catch (Exception e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}

    }

    private ArrayList<Visit> findBeforeDate(Connection connection, Long toDate) {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Visit> visits = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_UP_TO_DATE, false, toDate);
	    result = preparedStatement.executeQuery();
	    while (result.next())
		visits.add(Visit.parseResultSet(result));

	    return visits;
	} catch (Exception e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    private ArrayList<Visit> findAfterDate(Connection connection, Long fromDate) {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;
	ArrayList<Visit> visits = new ArrayList<>();

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FROM_DATE, false, fromDate);
	    result = preparedStatement.executeQuery();
	    while (result.next())
		visits.add(Visit.parseResultSet(result));

	    return visits;
	} catch (Exception e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

    @Override
    public Visit findById(Connection connection, Long visitId) throws DAOException {
	PreparedStatement preparedStatement = null;
	ResultSet result = null;

	try {
	    preparedStatement = DAOUtils.initPreparedStatement(connection, SQL_FIND_BY_ID, false, visitId);
	    result = preparedStatement.executeQuery();
	    if (result.next())
		return Visit.parseResultSet(result);
	    else
		return null;
	} catch (SQLException e) {
	    throw new DAOException(e);
	} finally {
	    DAOUtils.closeResultSet(result);
	    DAOUtils.closeStatement(preparedStatement);
	}
    }

}
